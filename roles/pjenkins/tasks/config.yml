---
- name: 'Create Jenkins SSH credentials'
  jenkins_credentials:
    jenkins_url: '{{ jenkins_master_url }}'
    username: '{{ jenkins_admin_username }}'
    password: '{{ jenkins_admin_password }}'
    kwargs:
      name: '{{ jenkins_slave_credentials_id }}'
      cls: '{{ ssh_credentials_package }}.BasicSSHUserPrivateKey'
      keyCls: '{{ ssh_credentials_package }}.BasicSSHUserPrivateKey.DirectEntryPrivateKeySource'
      keyFile: '{{ lookup("env","HOME") + "/.ssh/ec2.jenkins" }}'
      userName: '{{ jenkins.user.name }}'
      passphrase: '{{ jenkins_sshkey_passphrase }}'
      description: 'EC2 Performance VMs'
  no_log: False if debug else True

- name: 'Check Jenkins existing EC2 masters'
  jenkins_api:
    jenkins_url: '{{ jenkins_master_url }}'
    username: '{{ jenkins_admin_username }}'
    password: '{{ jenkins_admin_password }}'
    command: node_exists
    args:
      - 'mperf-master{{ item.ami_launch_index }}'
  when: item.public_dns_name is defined
  with_items: '{{ groups.masters }}'
  register: jenkins_existed_masters
  no_log: False if debug else True

- debug: var=jenkins_existed_masters
  when: debug

- name: 'Check Jenkins existing EC2 slaves'
  jenkins_api:
    jenkins_url: '{{ jenkins_master_url }}'
    username: '{{ jenkins_admin_username }}'
    password: '{{ jenkins_admin_password }}'
    command: node_exists
    args:
      - 'mperf-slave{{ item.ami_launch_index }}'
  when: item.public_dns_name is defined
  with_items: groups.slaves
  register: jenkins_existed_slaves
  no_log: False if debug else True

- debug: var=jenkins_existed_slaves
  when: debug

- name: 'Delete Jenkins existing EC2 masters'
  jenkins_api:
    jenkins_url: '{{ jenkins_master_url }}'
    username: '{{ jenkins_admin_username }}'
    password: '{{ jenkins_admin_password }}'
    command: delete_node
    args:
      - 'mperf-master{{ slave.item.ami_launch_index }}'
  when: slave.node_exists
  with_items: '{{ jenkins_existed_masters.results }}'
  loop_control:
    loop_var: slave
  no_log: False if debug else True

- name: 'Delete Jenkins existing EC2 slaves'
  jenkins_api:
    jenkins_url: '{{ jenkins_master_url }}'
    username: '{{ jenkins_admin_username }}'
    password: '{{ jenkins_admin_password }}'
    command: delete_node
    args:
      - 'mperf-slave{{ slave.item.ami_launch_index }}'
  when: slave.node_exists
  with_items: '{{ jenkins_existed_slaves.results }}'
  loop_control:
    loop_var: slave
  no_log: False if debug else True

- name: 'Create Jenkins EC2 master nodes'
  jenkins_api:
    jenkins_url: '{{ jenkins_master_url }}'
    username: '{{ jenkins_admin_username }}'
    password: '{{ jenkins_admin_password }}'
    command: create_node
    args:
      - 'mperf-master{{ slave.item.ami_launch_index }}'
    kwargs:
      numExecutors: '{{ jenkins_slave_executors }}'
      nodeDescription: '{{ jenkins_slave_description }}'
      remoteFS: '{{ jenkins.user.home }}'
      labels: '{{ jenkins_slave_labels|join(" ") }}'
      launcher: 'hudson.plugins.sshslaves.SSHLauncher'
      launcher_params:
        port: '{{ jenkins_slave_port }}'
        username: '{{ jenkins.user.name }}'
        credentialsId: '{{ jenkins_slave_credentials_id }}'
        host: '{{ slave.item.public_dns_name }}'
  when: slave.item.public_dns_name is defined
  with_items: groups.masters
  loop_control:
    loop_var: slave
  no_log: False if debug else True

- name: 'Create Jenkins EC2 slave nodes'
  jenkins_api:
    jenkins_url: '{{ jenkins_master_url }}'
    username: '{{ jenkins_admin_username }}'
    password: '{{ jenkins_admin_password }}'
    command: create_node
    args:
      - 'mperf-slave{{ slave.item.ami_launch_index }}'
    kwargs:
      numExecutors: '{{ jenkins_slave_executors }}'
      nodeDescription: '{{ jenkins_slave_description }}'
      remoteFS: '{{ jenkins.user.home }}'
      labels: '{{ jenkins_slave_labels|join(" ") }}'
      launcher: 'hudson.plugins.sshslaves.SSHLauncher'
      launcher_params:
        port: '{{ jenkins_slave_port }}'
        username: '{{ jenkins.user.name }}'
        credentialsId: '{{ jenkins_slave_credentials_id }}'
        host: '{{ slave.item.public_dns_name }}'
  when: slave.item.public_dns_name is defined
  with_items: groups.slaves
  loop_control:
    loop_var: slave
  no_log: False if debug else True