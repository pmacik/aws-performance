---
- name: '{{ software_name | upper }}|Resolve installer specific vars'
  fail:
    msg: 'Variable "{{ item }}" is not defined'
  when: item not in vars
  with_items: '{{ required_vars }}'

#- name: '{{ software_name | upper }}|Get the current users name'
#  shell: id -u -n
#  changed_when: False
#  register: user_name

- name: '{{ software_name | upper }}|Check @{{ bundle.version }} is already installed'
  stat:
    path: '{{ _bundle_install_dir_ver }}'
  ignore_errors: yes
  changed_when: False
  register: bundle_installed

- when: not bundle_installed.stat.exists
  block:
  - name: '{{ software_name | upper }}|Create TMP directory'
    tempfile:
      state: directory
      prefix: '{{ software_name }}'
    changed_when: False
    register: tmp_dir_created
#    become_user: '{{ user_name.stdout }}'

  - name: '{{ software_name | upper }}|Download bundle archive'
    get_url:
      url: '{{ _bundle_url_full }}'
      dest: '{{ tmp_dir_created.path }}'
    when: not tmp_dir_created|skipped
    register: bundle_downloaded
#    become_user: '{{ user_name.stdout }}'

  - name: '{{ software_name | upper }}|Create installation directory'
    file:
      path: '{{ _bundle_install_dir_parent }}'
      state: directory
      owner: '{{ current_user }}'
    when: not bundle_downloaded|skipped
#    become_user: '{{ user_name.stdout }}'

  - name: '{{ software_name | upper }}|Extract bundle archive'
    unarchive:
      src: '{{ tmp_dir_created.path }}/{{ _bundle_archive }}'
      dest: '{{ _bundle_install_dir_parent }}'
      owner: '{{ current_user }}'
      creates: '{{ _bundle_install_dir_creates }}'
      copy: no
      extra_opts: '{{ _bundle_archive_extra_opts }}'
    when: not bundle_downloaded|skipped
    register: bundle_extracted
#    become_user: '{{ user_name.stdout }}'

  - when: _bundle_unzip_strip_top
    block:
    - stat:
        path: '{{ _bundle_install_dir_creates }}'
      register: stat_software_dir

    - name: '{{ software_name | upper }}|Move {{ _bundle_install_dir_creates }}->{{ _bundle_install_dir_ver }}'
      command: 'mv  {{ _bundle_install_dir_creates }} {{ _bundle_install_dir_ver }}'
      changed_when: False
#      become_user: '{{ user_name.stdout }}'
      when: stat_software_dir.stat.exists

  - name: '{{ software_name | upper }}|Sym link {{ _bundle_install_dir_ver }} as default'
    file:
      src: '{{ _bundle_install_dir_ver }}'
      dest: '{{ _bundle_install_dir_default }}'
      owner: '{{ current_user }}'
      state: link
      force: yes
    when: not bundle_extracted|skipped
    register: install_dir_default_linked
#    become_user: '{{ user_name.stdout }}'

  - name: '{{ software_name | upper }}|Sym link /usr/local/bin/{{ software_name }}'
    file:
      src: '{{ _bundle_install_dir_default }}/{{ _bundle_exec_path }}'
      dest: '/usr/local/bin/{{ software_name }}'
      owner: '{{ current_user }}'
      state: link
      force: yes
    when: not install_dir_default_linked|skipped
#    become_user: '{{ user_name.stdout }}'

  always:
  - name: '{{ software_name | upper }}|Cleanup TMP directory'
    file:
      name: '{{ tmp_dir_created.path }}'
      state: absent
    changed_when: False
#    become_user: '{{ user_name.stdout }}'