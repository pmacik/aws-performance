---
- name: 'Ensure all RPM packages updated'
  action: '{{ ansible_pkg_mgr }}'
  args:
    name: '*'
    state: latest
  become: yes
  no_log: True
  tags: [system, packages]

- name: 'Ensure SYSTEM packages installed'
  action: '{{ ansible_pkg_mgr }}'
  args:
    name: '{{ item }}'
    state: latest
  become: yes
  with_items: '{{ system_packages }}'
  no_log: True
  tags: [system, packages]

- name: 'Ensure EPEL packages installed'
  action: '{{ ansible_pkg_mgr }}'
  args:
    name: '{{ item }}'
    state: latest
  become: yes
  with_items: '{{ epel_packages }}'
  no_log: True
  tags: [system, packages]

- name: 'Ensure the NTP service is running and enabled'
  service:
    name: ntpd
    state: started
    enabled: True
  become: yes
  tags: [system, ntp]

- name: 'Ensure MOTD file is present and updated'
  template:
    src: motd.j2
    dest: /etc/motd
    owner: root
    group: root
    mode: 0644
  become: yes
  tags: [system, motd]

- name: 'Set System limits'
  lineinfile: dest=/etc/security/limits.conf line='{{ item.key }}' regexp='{{ item.value }}'
  with_dict:
    '*         hard    nofile      999999' : '\*\s+hard\s+nofile'
    '*         soft    nofile      999999' : '\*\s+soft\s+nofile'
    'root      hard    nofile      999999' : 'root\s+hard\s+nofile'
    'root      soft    nofile      999999' : 'root\s+soft\s+nofile'
  become: yes
  changed_when: False
  tags: [system, limits]

- name: 'Set LC_ALL and LANG parameters'
  lineinfile:
    dest: /etc/environment
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  become: yes
  with_items:
    - { regexp: '^LANG=', line: 'LANG=en_US.utf-8' }
    - { regexp: '^LC_ALL=', line: 'LC_ALL=en_US.utf-8' }
  tags: [system, locale]

- name: 'Put SELinux in permissive mode, logging actions that would be blocked'
  selinux:
    policy: targeted
    state: permissive
  become: yes
  tags: [system, selinux]

# Disable SELinux
- name: 'Disable SELinux at next reboot'
  selinux:
    state: disabled
  become: yes
  tags: [system, selinux]

- name: 'Upgrade PIP version'
  pip:
    name: pip
    state: latest
    extra_args: --upgrade
  become: yes
  tags: [system, pip]

- name: 'Check PIP version'
  shell: pip --version | awk '{print $2}'
  changed_when: False
  register: pip_curr_version
  failed_when: pip_curr_version.stdout|version_compare(system_pip_version,'<')
  tags: [system, pip]

- debug: var=pip_curr_version

#TODO
#- name: Create /etc/hosts file
#  template:
#    src: hosts.j2
#    dest: /etc/hosts
#    owner: root
#    group: root
#    mode: 0644
#  become: yes
#  tags: [system, hosts]

#- name: Ensure hostname is the same of the inventory
#  hostname:
#    name: '{{ inventory_hostname }}'
#  become: yes
#  tags: [system, hostname]

#- name: Make Jenkins user sudoer
#  lineinfile:
#    dest: /etc/sudoers
#    state: present
#    line: '{{ jenkins.user.name }}	ALL=(ALL:ALL) NOPASSWD:ALL'
#    validate: 'visudo -cf %s'
#  become: yes
#  changed_when: False
#  tags: [jenkins, user]